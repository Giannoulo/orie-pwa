{"version":3,"sources":["Components/Header.tsx","Components/Canvas.tsx","Components/Visualizer.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["Header","id","normalizeOrientationValues","orieValue","typeOfValue","a","b","Canvas","orientation","canvasRef","useRef","useEffect","context","current","getContext","clearRect","canvas","width","height","fillStyle","alpha","beta","gamma","orientationToRGBA","fillRect","ref","Visualizer","useState","setOrientation","handleOrientation","event","absolute","window","addEventListener","removeEventListener","App","className","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"oKAMeA,EAJA,WACb,OAAO,qBAAKC,GAAG,aAAR,mB,OCSHC,EAA6B,SAACC,EAAmBC,GACrD,IAAIC,EACAC,EACJ,OAAQF,GACN,IAAK,QAIHE,EAAI,IAAU,KADdD,EAAI,IAAM,KAENF,EAAY,MACdA,EAAY,KAEd,MACF,IAAK,OAIHG,EAAI,IAAU,IADdD,EAAI,IAAM,KAENF,EAAY,GACdA,EAAY,GACHA,GAAa,KACtBA,GAAa,IAEf,MACF,QAIEG,EAAI,IAAU,IADdD,EAAI,IAAM,IAENF,EAAY,GACdA,EAAY,GACHA,GAAa,KACtBA,GAAa,IAInB,OAAOE,EAAIF,EAAYG,GA6BVC,EAhBA,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,YACTC,EAAYC,iBAA0B,MAY5C,OAXAC,qBAAU,WAAO,IAAD,EACRC,EAAO,UAAGH,EAAUI,eAAb,aAAG,EAAmBC,WAAW,MAC1CF,IACFA,EAAQG,UAAU,EAAG,EAAGH,EAAQI,OAAOC,MAAOL,EAAQI,OAAOE,QACzDV,IACFI,EAAQO,UAjBU,SAAC,GAAqD,IAApDC,EAAmD,EAAnDA,MAAOC,EAA4C,EAA5CA,KAAMC,EAAsC,EAAtCA,MACvC,MAAM,QAAN,OAAepB,EACbkB,GAAgB,EAChB,SAFF,YAGKlB,EAA2BmB,GAAc,EAAG,QAHjD,YAG4DnB,EAC1DoB,GAAgB,EAChB,SALF,OAgB0BC,CAAkBf,GACtCI,EAAQY,SAAS,EAAG,EAAGZ,EAAQI,OAAOC,MAAOL,EAAQI,OAAOE,YAG/D,CAACV,IAEG,wBAAQiB,IAAKhB,KCtCPiB,EA1BI,WAAoB,IAAD,EACEC,mBAAmC,MADrC,mBAC7BnB,EAD6B,KAChBoB,EADgB,KAG9BC,EAAoB,SAACC,GACzBF,EAAe,CACbG,SAAUD,EAAMC,SAChBX,MAAOU,EAAMV,MACbC,KAAMS,EAAMT,KACZC,MAAOQ,EAAMR,SAWjB,OAPAX,qBAAU,WAER,OADAqB,OAAOC,iBAAiB,oBAAqBJ,GACtC,WACLG,OAAOE,oBAAoB,oBAAqBL,MAEjD,IAGD,qBAAK5B,GAAG,iBAAR,SACE,cAAC,EAAD,CAAQO,YAAaA,OClBZ2B,EATH,WACV,OACE,sBAAKC,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,QCIAC,EAAcC,QACW,cAA7BN,OAAOO,SAASC,UAEe,UAA7BR,OAAOO,SAASC,UAEhBR,OAAOO,SAASC,SAASC,MAAM,2DA0CnC,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,+GAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,MCjGjE,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SFcnB,SAAkB9B,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI8B,IAAIC,YAAwB5C,OAAOO,SAASsC,MACpDC,SAAW9C,OAAOO,SAASuC,OAIvC,OAGF9C,OAAOC,iBAAiB,QAAQ,WAC9B,IAAMU,EAAK,UAAMiC,YAAN,sBAEPvC,IAgEV,SAAiCM,EAAeC,GAE9CmC,MAAMpC,EAAO,CACXqC,QAAS,CAAE,iBAAkB,YAE5BhC,MAAK,SAACiC,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CxC,UAAUC,cAAcwC,MAAMtC,MAAK,SAACC,GAClCA,EAAasC,aAAavC,MAAK,WAC7BhB,OAAOO,SAASiD,eAKpB9C,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IAAI,oEAtFVgC,CAAwB9C,EAAOC,GAI/BC,UAAUC,cAAcwC,MAAMtC,MAAK,WACjCQ,QAAQC,IACN,+GAMJf,EAAgBC,EAAOC,OEpC/B8C,GAKA5B,K","file":"static/js/main.8d816999.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = (): JSX.Element => {\n  return <div id=\"header-row\">Orie</div>;\n};\n\nexport default Header;\n","import React, {useRef, useEffect} from \"react\";\n\ntype OrientationObject = {\n  absolute: boolean;\n  alpha: number | null;\n  beta: number | null;\n  gamma: number | null;\n};\ntype Props = {\n  orientation: OrientationObject | null;\n};\n\nconst normalizeOrientationValues = (orieValue: number, typeOfValue: string): number => {\n  let a: number;\n  let b: number;\n  switch (typeOfValue) {\n    case \"alpha\":\n      // a = 255 / 360;\n      // b = 255 - a * 360;\n      a = 255 / 180;\n      b = 255 - a * 180;\n      if (orieValue > 180) {\n        orieValue = 180;\n      }\n      break;\n    case \"beta\":\n      // a = 255 / 360;\n      // b = 255 - a * 180;\n      a = 255 / 180;\n      b = 255 - a * 90;\n      if (orieValue > 90) {\n        orieValue = 90;\n      } else if (orieValue < -90) {\n        orieValue = -90;\n      }\n      break;\n    default:\n      // a = 255 / 180;\n      // b = 255 - a * 90;\n      a = 255 / 90;\n      b = 255 - a * 45;\n      if (orieValue > 45) {\n        orieValue = 45;\n      } else if (orieValue < -45) {\n        orieValue = -45;\n      }\n      break;\n  }\n  return a * orieValue + b;\n};\n\nconst orientationToRGBA = ({alpha, beta, gamma}: OrientationObject): string => {\n  return `rgba(${normalizeOrientationValues(\n    alpha ? alpha : 0,\n    \"alpha\"\n  )},${normalizeOrientationValues(beta ? beta : 0, \"beta\")},${normalizeOrientationValues(\n    gamma ? gamma : 0,\n    \"gamma\"\n  )},1)`;\n};\n\nconst Canvas = ({orientation}: Props) => {\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  useEffect(() => {\n    const context = canvasRef.current?.getContext(\"2d\");\n    if (context) {\n      context.clearRect(0, 0, context.canvas.width, context.canvas.height);\n      if (orientation) {\n        context.fillStyle = orientationToRGBA(orientation);\n        context.fillRect(0, 0, context.canvas.width, context.canvas.height);\n      }\n    }\n  }, [orientation]);\n\n  return <canvas ref={canvasRef} />;\n};\n\nexport default Canvas;\n","import React, {useEffect, useState} from \"react\";\nimport Canvas from \"./Canvas\";\n\ntype OrientationObject = {\n  absolute: boolean;\n  alpha: number | null;\n  beta: number | null;\n  gamma: number | null;\n};\n\nconst Visualizer = (): JSX.Element => {\n  const [orientation, setOrientation] = useState<OrientationObject | null>(null);\n\n  const handleOrientation = (event: DeviceOrientationEvent): void => {\n    setOrientation({\n      absolute: event.absolute,\n      alpha: event.alpha,\n      beta: event.beta,\n      gamma: event.gamma,\n    });\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"deviceorientation\", handleOrientation);\n    return () => {\n      window.removeEventListener(\"deviceorientation\", handleOrientation);\n    };\n  }, []);\n\n  return (\n    <div id=\"visualiser-div\">\n      <Canvas orientation={orientation} />\n    </div>\n  );\n};\n\nexport default Visualizer;\n","import React from \"react\";\nimport Header from \"./Components/Header\";\nimport Visualizer from \"./Components/Visualizer\";\n\nconst App = (): JSX.Element => {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Visualizer />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./SCSS/main.css\";\nimport App from \"./App\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}